#################JavaMail发送带有附件的邮件########################

public class JavaMailDemo {

  public void sendMail() throws Exception {
    /*
     * 1. 得到session
     */
    Properties props = new Properties();
    props.setProperty("webmail.unionpay.com", "smtp.unionpay.com");
    props.setProperty("mail.smtp.auth", "true");

    Authenticator auth = new Authenticator() {
      @Override
      protected PasswordAuthentication getPasswordAuthentication() {
        return new PasswordAuthentication("itcast_cxf", "itcast");
      }
    };

    Session session = Session.getInstance(props, auth);

    /*
     * 2. 创建MimeMessage
     */
    MimeMessage msg = new MimeMessage(session);
    msg.setFrom(new InternetAddress("sand_test@unionpay.com"));//设置发件人
    msg.setRecipients(RecipientType.TO, "receive_test@163.com");//设置收件人
    msg.setRecipients(RecipientType.CC, "all_person@163.com");//设置抄送
    msg.setRecipients(RecipientType.BCC, "none@sina.com");//设置暗送

    msg.setSubject("这是来自send_test的测试邮件");
    msg.setContent("这就是一封垃圾邮件！", "text/html;charset=utf-8");
    /*         测试账号：test1/unionpay123
                        test2/unionpay123
                        test33/unionpay33
                        unionpayadmin/shunionpay2019      */
    /* 收件人测试账号：UnionPay2019@163.com       */
    
    
    /*
     * 3. 发邮件
     */
    Transport.send(msg);
  }

  /**
   * 带有附件的邮件！！！
   */

  public void sendMail2() throws Exception {
    /*
     * 1. 得到session
     */
    Properties props = new Properties();
    props.setProperty("webmail.unionpay.com", "smtp.unionpay.com");
    props.setProperty("mail.smtp.auth", "true");

    Authenticator auth = new Authenticator() {
      @Override
      protected PasswordAuthentication getPasswordAuthentication() {
        return new PasswordAuthentication("unionpay", "itcast");
      }
    };

    Session session = Session.getInstance(props, auth);

    /*
     * 2. 创建MimeMessage
     */
    MimeMessage msg = new MimeMessage(session);
    msg.setFrom(new InternetAddress("send_test@unionpay.com"));//设置发件人
    msg.setRecipients(RecipientType.TO, "receive_test@163@126.com");//设置收件人

    msg.setSubject("这是来自ITCAST的测试邮件有附件");


    ////////////////////////////////////////////////////////
    /*
     * 当发送包含附件的邮件时，邮件体就为多部件形式！
     * 1. 创建一个多部件的部件内容！MimeMultipart
     *   MimeMultipart就是一个集合，用来装载多个主体部件！
     * 2. 我们需要创建两个主体部件，一个是文本内容的，另一个是附件的。
     *   主体部件叫MimeBodyPart
     * 3. 把MimeMultipart设置给MimeMessage的内容！
     */
    MimeMultipart list = new MimeMultipart();//创建多部分内容

    // 创建MimeBodyPart
    MimeBodyPart part1 = new MimeBodyPart();
    // 设置主体部件的内容
    part1.setContent("这是一封包含附件的垃圾邮件", "text/html;charset=utf-8");
    // 把主体部件添加到集合中
    list.addBodyPart(part1);



    ////////////////////////////////////////////////////////

 

#########################MailUtils#####################################

 
public class MailUtils {
    public static Session createSession(String host, final String username, final String password) {
        Properties prop = new Properties();
        prop.setProperty("webmail.unionpay.com", host);// 指定主机
        prop.setProperty("mail.smtp.auth", "true");// 指定验证为true

        // 创建验证器
        Authenticator auth = new Authenticator() {
            public PasswordAuthentication getPasswordAuthentication() {
                return new PasswordAuthentication(username, password);
            }
        };

        // 获取session对象
        return Session.getInstance(prop, auth);
    }

    /**
     * 发送指定的邮件
     * 
     * @param mail
     */
    public static void send(Session session, final Mail mail) throws MessagingException,
            IOException {

        MimeMessage msg = new MimeMessage(session);// 创建邮件对象
        msg.setFrom(new InternetAddress(mail.getFrom()));// 设置发件人
        msg.addRecipients(RecipientType.TO, mail.getToAddress());// 设置收件人

        // 设置抄送
        String cc = mail.getCcAddress();
        if (!cc.isEmpty()) {
            msg.addRecipients(RecipientType.CC, cc);
        }

        // 设置暗送
        String bcc = mail.getBccAddress();
        if (!bcc.isEmpty()) {
            msg.addRecipients(RecipientType.BCC, bcc);
        }

        msg.setSubject(mail.getSubject());// 设置主题

        MimeMultipart parts = new MimeMultipart();// 创建部件集对象

        MimeBodyPart part = new MimeBodyPart();// 创建一个部件
        part.setContent(mail.getContent(), "text/html;charset=utf-8");// 设置邮件文本内容
        parts.addBodyPart(part);// 把部件添加到部件集中

        ///////////////////////////////////////////

        // 添加附件
        List<AttachBean> attachBeanList = mail.getAttachs();// 获取所有附件
        if (attachBeanList != null) {
            for (AttachBean attach : attachBeanList) {
                MimeBodyPart attachPart = new MimeBodyPart();// 创建一个部件
                attachPart.attachFile(attach.getFile());// 设置附件文件
                attachPart.setFileName(MimeUtility.encodeText(attach
                        .getFileName()));// 设置附件文件名
                parts.addBodyPart(attachPart);
            }
        }

        msg.setContent(parts);// 给邮件设置内容
        Transport.send(msg);// 发邮件
    }
}
